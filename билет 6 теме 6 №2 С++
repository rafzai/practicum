#include <iostream>
#include <cmath>
#include <vector>

// Define the function to optimize
double f(const std::vector<double>& x) {
    return x[0] * x[0] + exp(x[1] * x[1]) + x[1] * x[1] + 4 * x[0] + 3 * x[1];
}

// Compute the gradient of the function
std::vector<double> gradient(const std::vector<double>& x) {
    double df_dx1 = 2 * x[0] + 4;
    double df_dx2 = 2 * x[1] * exp(x[1] * x[1]) + 2 * x[1] + 3;
    return {df_dx1, df_dx2};
}

// Steepest descent method
void steepestDescent(std::vector<double>& x, double alpha = 0.01, double tol = 1e-6, int max_iter = 1000) {
    for (int iter = 0; iter < max_iter; ++iter) {
        std::vector<double> grad = gradient(x);
        std::vector<double> x_new = x;
        for (int i = 0; i < x.size(); ++i) {
            x_new[i] -= alpha * grad[i];
        }

        // Check for convergence
        double diff = 0;
        for (int i = 0; i < x.size(); ++i) {
            diff += std::abs(x_new[i] - x[i]);
        }
        if (diff < tol) break;
        x = x_new;
    }
}

int main() {
    std::vector<double> x = {0.0, 0.0}; // Initial guess
    steepestDescent(x);

    std::cout << "Optimized values: " << std::endl;
    std::cout << "x1 = " << x[0] << std::endl;
    std::cout << "x2 = " << x[1] << std::endl;
    std::cout << "Minimum value of f(x) = " << f(x) << std::endl;

    return 0;
}
