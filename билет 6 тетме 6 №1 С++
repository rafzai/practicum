#include <iostream>
#include <cmath>
#include <vector>
#include <functional>

// Define the function to optimize
double f(const std::vector<double>& x) {
    return exp(x[0] * x[0]) + x[1] * x[1] + log(4 + x[0] * x[0] + 2 * x[2] * x[2]);
}

// Coordinate descent method
void coordinateDescent(std::vector<double>& x, double tol = 1e-6, int max_iter = 1000) {
    int n = x.size();
    for (int iter = 0; iter < max_iter; ++iter) {
        std::vector<double> x_old = x;
        for (int i = 0; i < n; ++i) {
            auto f_i = [&](double xi) {
                std::vector<double> x_temp = x;
                x_temp[i] = xi;
                return f(x_temp);
            };
            
            // One-dimensional optimization for x_i
            double a = x[i] - 1, b = x[i] + 1;
            while (b - a > tol) {
                double c = a + (b - a) / 3;
                double d = b - (b - a) / 3;
                if (f_i(c) < f_i(d)) {
                    b = d;
                } else {
                    a = c;
                }
            }
            x[i] = (a + b) / 2;
        }
        
        // Check for convergence
        double diff = 0;
        for (int i = 0; i < n; ++i) {
            diff += std::abs(x[i] - x_old[i]);
        }
        if (diff < tol) break;
    }
}

int main() {
    std::vector<double> x = {0.0, 0.0, 0.0}; // Initial guess
    coordinateDescent(x);

    std::cout << "Optimized values: " << std::endl;
    std::cout << "x1 = " << x[0] << std::endl;
    std::cout << "x2 = " << x[1] << std::endl;
    std::cout << "x3 = " << x[2] << std::endl;
    std::cout << "Minimum value of f(x) = " << f(x) << std::endl;

    return 0;
}
