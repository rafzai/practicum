#include <iostream>
#include <vector>
#include <cmath>

void gauss_seidel(std::vector<std::vector<double>> &a, std::vector<double> &b, std::vector<double> &x, double tol=1e-2, int max_iterations=100) {
    int n = b.size();
    std::vector<double> x_new(n, 0.0);
    for (int iter = 0; iter < max_iterations; ++iter) {
        for (int i = 0; i < n; ++i) {
            double sigma = 0.0;
            for (int j = 0; j < n; ++j) {
                if (i != j) {
                    sigma += a[i][j] * x[j];
                }
            }
            x_new[i] = (b[i] - sigma) / a[i][i];
        }
        double error = 0.0;
        for (int i = 0; i < n; ++i) {
            error += std::abs(x_new[i] - x[i]);
        }
        if (error < tol) {
            break;
        }
        x = x_new;
    }
}

int main() {
    std::vector<std::vector<double>> A = {
        {3, 2, 4, 2, 4},
        {4, 1, 3, 1, 3},
        {3, 1, 3, 1, 4},
        {4, 1, 3, 3, 1},
        {5, 3, 5, 2, 2}
    };
    
    std::vector<double> B = {-190, -115, -150, 37.4, 13.7};
    std::vector<double> X(B.size(), 0.0);

    gauss_seidel(A, B, X);

    std::cout << "Solution using Gauss-Seidel method:" << std::endl;
    for (double xi : X) {
        std::cout << xi << " ";
    }
    std::cout << std::endl;

    return 0;
}
