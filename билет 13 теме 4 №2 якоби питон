import numpy as np

def jacobi_method(a, b, tol=1e-4, max_iterations=100):
    x = np.zeros_like(b)
    n = len(b)
    for _ in range(max_iterations):
        x_new = np.zeros_like(x)
        for i in range(n):
            s1 = sum(a[i][j] * x[j] for j in range(n) if j != i)
            x_new[i] = (b[i] - s1) / a[i][i]
        if np.allclose(x, x_new, tol):
            return x_new
        x = x_new
    return x

# Coefficient matrix
A = np.array([
    [2, 0, 2],
    [0, 2, 5],
    [4, 2, 5]
])

# Constant terms
B = np.array([1, 2, 0])

X = jacobi_method(A, B)

print("Solution using Jacobi method:")
print(X)
